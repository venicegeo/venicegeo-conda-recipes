#!/usr/bin/groovy

node {
    def root = pwd()
    
	stage("Setup") {
		deleteDir()
		if(env.GITLAB_CREDS) {
		  	git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}", credentialsId: "${env.GITLAB_CREDS}"
		} else {
		  	git url: "${env.GIT_URL}", branch: "${env.GIT_BRANCH}"
		}        
        sh "./init.sh"
        sh "git submodule"
		sh """
          bash miniconda.sh -b -p $root/miniconda2
          rm miniconda.sh
		"""
    }
    
    stage("Docker") {
        sh """mkdir -p docker/share
          mv recipes docker/share/
          mv vendor docker/share/"""
        dir("docker") {
	    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.ARTIFACT_READ_ONLY_CREDS}", usernameVariable: 'NEXUSUSER', passwordVariable: 'NEXUSPASS']]) {
                sh """
		  sed -i "s*CONDA_CHANNEL*`echo $CONDA_CHANNEL_CREDS_URL | sed -e "s/NEXUSUSER/${NEXUSUSER}/g" | sed -e "s/NEXUSPASS/${NEXUSPASS}/g"`*g" recipe-script.sh
		  sed -i "s*SED_CHANNEL*$CONDA_CHANNEL_URL*g" recipe-script.sh
		  sed -i "s*SED_USER*$NEXUSUSER*g" recipe-script.sh
		  sed -i "s*SED_PASSWORD*$NEXUSPASS*g" recipe-script.sh
	          docker-compose rm -f --all
                  docker-compose up --build --no-color"""
	    }
	}
    }
    
    stage("Nexus Deploy") {
        dir ("docker/share") {
            withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: "${env.ARTIFACT_STORAGE_CREDS}", usernameVariable: 'NEXUSUSER', passwordVariable: 'NEXUSPASS']]) {
		sh 'for f in $(find linux-64 -type f); do curl -T $f -u $NEXUSUSER:$NEXUSPASS $CONDA_CHANNEL_URL/$f; done'
            }
        }
    }
}
